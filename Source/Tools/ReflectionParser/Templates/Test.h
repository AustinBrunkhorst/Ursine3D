#pragma once

#include "Meta.h"

///////////////////////////////////////////////////////////////////////////////
// Classes
///////////////////////////////////////////////////////////////////////////////

class Test
{
public:
	double publicField;

    Test(void) { }

	void Method(void) { }
   
	void ConstMethod(void) const { }

	void OverloadedMethod(void) { }
	void OverloadedMethod(int) { }
	void OverloadedMethod(int, int) { }
	void OverloadedMethod(int, int) const { }

private:
	int m_privateField;

	Test(int, int) { }

	void privateMethod(void) { }
} Meta(Enable);

class Declaration 
Meta(Enable);

class Disabled { };

///////////////////////////////////////////////////////////////////////////////
// Enums
///////////////////////////////////////////////////////////////////////////////

enum Enum 
{
	One,
	Two,
	Three
};

enum class EnumClass : unsigned
{
	Four,
	Five,
	Six
};

///////////////////////////////////////////////////////////////////////////////
// Globals
///////////////////////////////////////////////////////////////////////////////

Meta(Enable)
int Global;

const int ConstGlobal = 0;

///////////////////////////////////////////////////////////////////////////////
// Global Functions
///////////////////////////////////////////////////////////////////////////////

Meta(Enable, A=B, OK, C=D)
int GlobalFunction(int, double, float) { return 0; }